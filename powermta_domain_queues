#!/usr/bin/env ruby
pod=<<-POD

=head1 NAME

powermta_domain_queues
Munin plugin that monitors the number of messages queued up for each domain.

=head1 CONFIGURATION

The PowerMTA HTTP status interface must be enabled.

Options:
  env.url http://localhost:8080 # URL to PowerMTA monitor interface
  env.auth_user [empty]         # HTTP auth username for stats, if any
  env.auth_pass [empty]         # HTTP auth password for stats, if any
  
ln -s /usr/share/munin/plugins/powermta_domain_queues \
  /etc/munin/plugins/powermta_domain_queues

=head1 MAGIC MARKERS
  #%# family=auto
  #%# capabilities=autoconf
  
=head1 VERSION
1.0

=head1 AUTHOR
Chris Boulton <chris.boulton@interspire.com>
http://chrisboulton.net/
http://github.com/chrisboulton/munin-powermta

=head1 LICENSE
BSD

POD

require 'pathname'
require 'net/http'
require 'rexml/document'

PMTA_URL  = ENV['url'] || 'http://localhost:8080'
PMTA_USER = ENV['auth_user'] || ''
PMTA_PASS = ENV['auth_pass'] || ''

SCRIPT_NAME = File.basename(Pathname.new(__FILE__).realpath)

STAT_TYPE = File.basename($0).gsub(SCRIPT_NAME, '');

def autoconf
  begin
    get_powermta_stats
  rescue Exception => e
    puts "no (#{e})"
  end

  puts "yes"
  exit 0
end

def config
  puts <<-EOF
graph_category PowerMTA
graph_title PowerMTA queue size by domain
graph_vlabel number of messages
graph_args --base 1000
EOF
  begin
    rsp = get_powermta_domain_stats
    REXML::XPath.each(rsp, '//domain') { |domain|
      name = domain.elements['name'].text
      key = name.gsub(/[\.\/\-]/, "_")
      puts "#{key}.label #{name}\n"
    }
  rescue Exception => e
    $stderr.puts e
    exit 1
  end
end

def fetch
  begin
    rsp = get_powermta_domain_stats
    REXML::XPath.each(rsp, '//domain') { |domain|
      key = domain.elements['name'].text.gsub(/[\.\/\-]/, "_")
      value = domain.elements['rcp'].text
      puts "#{key}.value #{value}\n"
    }
  rescue Exception => e
    $stderr.puts e
    exit 1
  end
end

def get_powermta_domain_stats
  url = "#{PMTA_URL}/domains?format=xml"
  begin
    response = Net::HTTP.get_response(URI.parse(url)).body
    xml = REXML::Document.new(response)
  rescue Exception => e
    raise "Unable to fetch PowerMTA domains from #{url}"
  end
  
  rsp = REXML::XPath.first(xml, "//rsp")
  if rsp.nil?
    raise "Not a valid PowerMTA status page"
  end
  
  return rsp
end

if ARGV[0] == "config"
  config
elsif ARGV[0] == "autoconf"
  autoconf
else
  fetch
end